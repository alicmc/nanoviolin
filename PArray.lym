import pya
import math

"""
This sample PCell implements a library called "MyLib" with a single PCell that
draws a Parray. This parametric array allows the user to modify the angle and
magnification of a shape along the rows and columns independently.

NOTE: after changing the code, the macro needs to be rerun to install the new
implementation. The macro is also set to "auto run" to install the PCell 
when KLayout is run.
"""

class Parray(pya.PCellDeclarationHelper):
  """
  The PCell declaration for the Parray
  """

  def __init__(self):

    # Important: initialize the super class
    super(Parray, self).__init__()

    # declare the parameters
    self.param("l", self.TypeLayer, "Layer", default = pya.LayerInfo(1, 0))
    self.param("ref", self.TypeShape, "", default = pya.DPoint(0, 0))
    self.param("shp",self.TypeShape,"",default = pya.Polygon([pya.DPoint(-755, -108039), pya.DPoint(-2546, -107860), pya.DPoint(-5769, -107323), pya.DPoint(-8097, -106965), pya.DPoint(-11141, -106428), pya.DPoint(-13468, -106070), pya.DPoint(-16154, -105353), pya.DPoint(-17945, -104816), pya.DPoint(-20452, -104100), pya.DPoint(-22422, -103384), pya.DPoint(-24391, -102667), pya.DPoint(-26003, -101772), pya.DPoint(-27793, -101056), pya.DPoint(-28689, -100698), pya.DPoint(-30300, -99802), pya.DPoint(-31375, -98907), pya.DPoint(-32986, -98012), pya.DPoint(-34598, -96579), pya.DPoint(-35672, -95147), pya.DPoint(-36747, -93893), pya.DPoint(-38179, -92103), pya.DPoint(-38716, -90312), pya.DPoint(-39433, -89417), pya.DPoint(-40507, -87268), pya.DPoint(-41223, -84761), pya.DPoint(-41581, -81717), pya.DPoint(-41581, -79568), pya.DPoint(-41402, -76345), pya.DPoint(-41402, -71869), pya.DPoint(-40686, -69362), pya.DPoint(-39612, -66318), pya.DPoint(-38895, -64348), pya.DPoint(-38716, -63095), pya.DPoint(-37463, -61125), pya.DPoint(-36388, -58081), pya.DPoint(-35672, -56111), pya.DPoint(-35314, -54500), pya.DPoint(-35135, -52351), pya.DPoint(-35135, -50739), pya.DPoint(-35493, -48770), pya.DPoint(-36030, -47695), pya.DPoint(-36926, -46621), pya.DPoint(-37642, -45905), pya.DPoint(-35851, -44830), pya.DPoint(-33523, -45367), pya.DPoint(-31554, -45367), pya.DPoint(-28868, -45009), pya.DPoint(-27077, -43040), pya.DPoint(-26003, -42144), pya.DPoint(-24391, -39816), pya.DPoint(-23675, -37489), pya.DPoint(-22780, -35161), pya.DPoint(-21884, -33012), pya.DPoint(-21705, -30505), pya.DPoint(-21705, -27640), pya.DPoint(-21642, -24997), pya.DPoint(-15520, -24997), pya.DPoint(-18364, -25944), pya.DPoint(-20022, -28551), pya.DPoint(-19549, -30210), pya.DPoint(-19075, -32579), pya.DPoint(-17653, -34712), pya.DPoint(-15757, -35659), pya.DPoint(-13625, -37555), pya.DPoint(-12677, -40162), pya.DPoint(-13625, -43479), pya.DPoint(-15757, -44664), pya.DPoint(-19549, -44664), pya.DPoint(-21207, -43005), pya.DPoint(-23103, -44190), pya.DPoint(-22155, -45849), pya.DPoint(-20259, -47507), pya.DPoint(-14572, -47507), pya.DPoint(-11729, -45612), pya.DPoint(-10781, -43716), pya.DPoint(-9596, -40636), pya.DPoint(-9596, -38977), pya.DPoint(-10781, -37081), pya.DPoint(-12440, -34949), pya.DPoint(-13625, -33527), pya.DPoint(-15757, -31394), pya.DPoint(-16468, -29973), pya.DPoint(-15757, -29025), pya.DPoint(-14099, -28551), pya.DPoint(-12203, -28788), pya.DPoint(-12440, -26181), pya.DPoint(-15520, -24997), pya.DPoint(-21642, -24997), pya.DPoint(-21635, -24698), pya.DPoint(15450, -24698), pya.DPoint(12370, -25882), pya.DPoint(12133, -28489), pya.DPoint(14029, -28252), pya.DPoint(15687, -28726), pya.DPoint(16398, -29674), pya.DPoint(15687, -31095), pya.DPoint(13555, -33228), pya.DPoint(12370, -34650), pya.DPoint(10711, -36782), pya.DPoint(9526, -38678), pya.DPoint(9526, -40337), pya.DPoint(10711, -43417), pya.DPoint(11659, -45313), pya.DPoint(14502, -47208), pya.DPoint(20189, -47208), pya.DPoint(22085, -45550), pya.DPoint(23033, -43891), pya.DPoint(21137, -42706), pya.DPoint(19479, -44365), pya.DPoint(15687, -44365), pya.DPoint(13555, -43180), pya.DPoint(12607, -39863), pya.DPoint(13555, -37256), pya.DPoint(15687, -35360), pya.DPoint(17583, -34413), pya.DPoint(19005, -32280), pya.DPoint(19479, -29911), pya.DPoint(19952, -28252), pya.DPoint(18294, -25645), pya.DPoint(15450, -24698), pya.DPoint(-21635, -24698), pya.DPoint(-21526, -20119), pya.DPoint(-22063, -17613), pya.DPoint(-23317, -15464), pya.DPoint(-24033, -14568), pya.DPoint(-25287, -13494), pya.DPoint(-26383, -13157), pya.DPoint(-29646, -13278), pya.DPoint(-30121, -13673), pya.DPoint(-30556, -13311), pya.DPoint(-30658, -13315), pya.DPoint(-30682, -13206), pya.DPoint(-31196, -12778), pya.DPoint(-30841, -12494), pya.DPoint(-31017, -11703), pya.DPoint(-29047, -9555), pya.DPoint(-28868, -6869), pya.DPoint(-29047, -5615), pya.DPoint(-29138, -4245), pya.DPoint(-29942, -2034), pya.DPoint(-30479, 1368), pya.DPoint(-30479, 11025), pya.DPoint(-30587, 11038), pya.DPoint(-30014, 15478), pya.DPoint(-28581, 19633), pya.DPoint(-26433, 23214), pya.DPoint(-24570, 25076), pya.DPoint(-22565, 26652), pya.DPoint(-20130, 28371), pya.DPoint(-16405, 30090), pya.DPoint(-13397, 31093), pya.DPoint(-11391, 31522), pya.DPoint(-7667, 31952), pya.DPoint(-5583, 32213), pya.DPoint(-5583, 32219), pya.DPoint(-5031, 32267), pya.DPoint(-5031, 32690), pya.DPoint(-5028, 32690), pya.DPoint(-3877, 100880), pya.DPoint(-4900, 100880), pya.DPoint(-4903, 100816), pya.DPoint(-6469, 101000), pya.DPoint(-2500, 101000), pya.DPoint(-2500, 32000), pya.DPoint(-1000, 32000), pya.DPoint(-1000, 101000), pya.DPoint(1000, 101000), pya.DPoint(1000, 32000), pya.DPoint(2500, 32000), pya.DPoint(2500, 101000), pya.DPoint(-6469, 101000), pya.DPoint(-7380, 101107), pya.DPoint(-7201, 105226), pya.DPoint(-5769, 105405), pya.DPoint(-5232, 107195), pya.DPoint(-2725, 107733), pya.DPoint(-2725, 109344), pya.DPoint(-2546, 110598), pya.DPoint(-755, 111314), pya.DPoint(-755, 111306), pya.DPoint(736, 111306), pya.DPoint(736, 111314), pya.DPoint(2527, 110598), pya.DPoint(2706, 109344), pya.DPoint(2706, 107733), pya.DPoint(5213, 107195), pya.DPoint(5750, 105405), pya.DPoint(7182, 105226), pya.DPoint(7361, 101107), pya.DPoint(4751, 100800), pya.DPoint(3800, 100800), pya.DPoint(4951, 32610), pya.DPoint(4956, 32609), pya.DPoint(4949, 32267), pya.DPoint(5564, 32218), pya.DPoint(5564, 32213), pya.DPoint(7648, 31952), pya.DPoint(11372, 31522), pya.DPoint(13378, 31093), pya.DPoint(16386, 30090), pya.DPoint(20111, 28371), pya.DPoint(22546, 26652), pya.DPoint(24551, 25076), pya.DPoint(26414, 23214), pya.DPoint(28562, 19633), pya.DPoint(29995, 15478), pya.DPoint(30568, 11038), pya.DPoint(30460, 11025), pya.DPoint(30460, 1368), pya.DPoint(29923, -2034), pya.DPoint(29119, -4245), pya.DPoint(29028, -5615), pya.DPoint(28849, -6869), pya.DPoint(29028, -9555), pya.DPoint(30998, -11703), pya.DPoint(30822, -12494), pya.DPoint(31177, -12778), pya.DPoint(30663, -13206), pya.DPoint(30639, -13315), pya.DPoint(30537, -13311), pya.DPoint(30102, -13673), pya.DPoint(29627, -13278), pya.DPoint(26364, -13157), pya.DPoint(25268, -13494), pya.DPoint(24014, -14568), pya.DPoint(23298, -15464), pya.DPoint(22044, -17613), pya.DPoint(21507, -20119), pya.DPoint(21686, -27640), pya.DPoint(21686, -30505), pya.DPoint(21865, -33012), pya.DPoint(22761, -35161), pya.DPoint(23656, -37489), pya.DPoint(24372, -39816), pya.DPoint(25984, -42144), pya.DPoint(27058, -43040), pya.DPoint(28849, -45009), pya.DPoint(31535, -45367), pya.DPoint(33504, -45367), pya.DPoint(35832, -44830), pya.DPoint(37623, -45905), pya.DPoint(36907, -46621), pya.DPoint(36011, -47695), pya.DPoint(35474, -48770), pya.DPoint(35116, -50739), pya.DPoint(35116, -52351), pya.DPoint(35295, -54500), pya.DPoint(35653, -56111), pya.DPoint(36369, -58081), pya.DPoint(37444, -61125), pya.DPoint(38697, -63095), pya.DPoint(38876, -64348), pya.DPoint(39593, -66318), pya.DPoint(40667, -69362), pya.DPoint(41383, -71869), pya.DPoint(41383, -76345), pya.DPoint(41562, -79568), pya.DPoint(41562, -81717), pya.DPoint(41204, -84761), pya.DPoint(40488, -87268), pya.DPoint(39414, -89417), pya.DPoint(38697, -90312), pya.DPoint(38160, -92103), pya.DPoint(36728, -93893), pya.DPoint(35653, -95147), pya.DPoint(34579, -96579), pya.DPoint(32967, -98012), pya.DPoint(31356, -98907), pya.DPoint(30281, -99802), pya.DPoint(28670, -100698), pya.DPoint(27774, -101056), pya.DPoint(25984, -101772), pya.DPoint(24372, -102667), pya.DPoint(22403, -103384), pya.DPoint(20433, -104100), pya.DPoint(17926, -104816), pya.DPoint(16135, -105353), pya.DPoint(13449, -106070), pya.DPoint(11122, -106428), pya.DPoint(8078, -106965), pya.DPoint(5750, -107323), pya.DPoint(2527, -107860), pya.DPoint(736, -108039), pya.DPoint(736, -108034), pya.DPoint(-747, -108034), pya.DPoint(-755, -107960)]
))
    self.param("rownum", self.TypeInt, "Row Number", default = 4)  
    self.param("rowx", self.TypeDouble, "Row X", default = 0)
    self.param("rowy", self.TypeDouble, "Row Y", default = 5)
    self.param("rowm", self.TypeDouble, "Row Mag", default = 0)
    self.param("rowa", self.TypeDouble, "Row Angle", default = 0)
    self.param("colnum", self.TypeInt, "Col Number", default = 4)  
    self.param("colx", self.TypeDouble, "Col X", default = 5)
    self.param("coly", self.TypeDouble, "Col Y", default = 0)
    self.param("colm", self.TypeDouble, "Col Mag", default = 0)
    self.param("cola", self.TypeDouble, "Col Angle", default = 0)

  def display_text_impl(self):
    # Provide a descriptive text for the cell
    return "Parray(L=" + str(self.l) + ")"
  
  def coerce_parameters_impl(self):
    pass
  
  def can_create_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: this particular script is
    # only designed to handle polygons
    return self.shape.is_polygon()
  
  def parameters_from_shape_impl(self):
    self.shp = self.shape.dpolygon
    self.ref = self.shape.dbbox().center()
    self.l = self.layout.get_info(self.layer)
  
  def transformation_from_shape_impl(self):
    # Implement the "Create PCell from shape" protocol: we don't apply any
    # transformation in this case, since we're pulling the coordinates of
    # the verticies of the polygon.
    return pya.Trans(pya.Point(0,0))
  
  def produce_impl(self):
  
    # This is the main part of the implementation: create the layout

    # hack to get the correct units. We first add a copy of the shape
    # to the layout and return its coordinates in um.
    self.cell.shapes(self.l_layer).insert(self.shp)
    for j in self.cell.shapes(self.l_layer).each():
      self.shp = j.dpolygon
      
    for j in range(self.rownum):
      for k in range(self.colnum):
        tt = pya.DCplxTrans(self.ref.x+self.rowx*j+self.colx*k,self.ref.y+self.rowy*j+self.coly*k)
        tt = tt*pya.DCplxTrans(1+self.rowm*j+self.colm*k,self.rowa*j+self.cola*k,False,0,0)
        tt = tt*pya.DCplxTrans(-self.ref.x,-self.ref.y)
        self.cell.shapes(self.l_layer).insert(tt.trans(self.shp))


class MyLib(pya.Library):
  """
  The library where we will put the PCell into 
  """

  def __init__(self):
  
    # Set the description
    self.description = "My First Library"
    
    # Create the PCell declarations
    self.layout().register_pcell("Parray", Parray())
    # That would be the place to put in more PCells ...
    
    # Register us with the name "MyLib".
    # If a library with that name already existed, it will be replaced then.
    self.register("MyLib")


# Instantiate and register the library
MyLib()